@isTest
private class ECO_Service_Delegation_Test
{
	Static List<Contact> contacts;

	/* SEE ALL DATA MUST BE SET TO TRUE - REQUIRED IN ORDER TO SEE APPROVAL PROCESS DATA - DESIGNED TO ONLY HIT DATA GENERATED BY TEST */
	@isTest(seealldata=true)
	static void testApprovalEscalateFA(){

		ECO_ProjectTriggers.run = false;	
		ECO_ProjectTaskTriggers.run = false;
		setupTestData();
		
		ECO_Utils_Testing.createProjectRoles();
		Id recordTypeId = ECO_Utils_sObject.getRecordTypeId(Delegate__c.sObjectType, 'Vacation');
		Id recordTypeId2 = ECO_Utils_sObject.getRecordTypeId(Delegate__c.sObjectType, 'Key Roles');
        pse__Proj__c proj = [select id, CarryingOutOrganization__c from pse__Proj__c where Name = '**********test project 1' limit 1];

        proj.clAECOMProjectReviewCategory__c = 'C-4';
        proj.PnLManager__c = contacts[2].id;
        proj.ProjectApprover__c = contacts[3].id;
        proj.ProjectApproverUserForProcess__c = contacts[3].pse__Salesforce_User__c;
        proj.pse__Project_Manager__c = contacts[7].id;
        proj.CaptureManager__c = contacts[8].id;

        proj.EscalationApprover__c = null;
        proj.FlagForEscalate__c = true;

        update proj;


        list<AECOM_Delegation__c>  listDelToUpdate = [select id from AECOM_Delegation__c where Object_Name__c = 'pse__Proj__c'];
		for(AECOM_Delegation__c ad: listDelToUpdate){
			ad.Escalation__c = 'FA';
		}
		
		update listDelToUpdate;

		Delegate__c delegate = new Delegate__c();
		delegate.Delegate__c = contacts[1].Id;
		delegate.RecordTypeId = recordTypeId;
		delegate.Delegator__c = contacts[2].Id;
		delegate.Start_Date__c = Date.today();
		delegate.Allowed_Organizations__c = proj.CarryingOutOrganization__c;


		Delegate__c delegate2 = new Delegate__c(
												Key_Member_Role__c = 'Accountant Approver', 
												age_Change_in_Forecast_Net_Margin_lt__c = 1, 
												age_Change_in_Forecast_Net_Margin__c = 5,
												Agreement_Amount_estimated__c = 5000,
												Agreement_Amount_estimated_lt__c = 0,
												Backlog_Value_lt__c = 1000,
												Backlog_Value__c = 5000,
												Project_Net_Margin_age_of_NSR_lt__c = 1,
												Project_Net_Margin_age_of_NSR__c = 5,
												Project_Net_Margin_Value_lt__c = 1000,
												Project_Net_Margin_Value__c = 5000,
												Project_Revenue_Budget_lt__c = 1000,
												Project_Revenue_Budget__c = 5000,
												Value_change_in_Forecast_Net_Margin_lt__c = 1000,
												Value_change_in_Forecast_Net_Margin__c = 5000,
												Project_Review_Category_C_4_Bypass__c = true,
												Project_Review_Category_C_4__c = false,
												Start_Date__c = datetime.now().dateGMT(),
												End_Date__c = null,
												Allowed_Organizations__c = proj.CarryingOutOrganization__c

												);
		delegate2.Delegate__c = contacts[0].Id;
		delegate2.RecordTypeId = recordTypeId2;
		delegate2.Delegator__c = contacts[2].Id;
		delegate2.Approval_Status__c = 'Approved';


		list<Delegate__c> lstdelToInsert = new list<Delegate__c> ();
		lstdelToInsert.add(delegate);
		lstdelToInsert.add(delegate2);

		insert lstdelToInsert;

        Test.startTest();
        Approval.ProcessSubmitRequest req = new Approval.ProcessSubmitRequest();
        req.setObjectId(proj.id);
        Approval.ProcessResult result = Approval.process(req);

        string query = ECO_Service_Delegation.formQuery();
        query += ' and id=\'' + result.instanceId + '\'';

        list<ProcessInstance> lstPI = database.query(query);

        system.debug('*****SAWI:' + lstPI);

        for (ProcessInstanceHistory pih : lstPI[0].StepsAndWorkItems) {
        	system.debug('*****SAWI:' + pih);
    	}

		//ECO_DelegateEscalationBatch b = new ECO_DelegateEscalationBatch();
		//Database.executeBatch(b);

		ECO_Service_Delegation.handleEscalationExecute(lstPI, false);
		Test.stopTest();
	}

	/* SEE ALL DATA MUST BE SET TO TRUE - REQUIRED IN ORDER TO SEE APPROVAL PROCESS DATA - DESIGNED TO ONLY HIT DATA GENERATED BY TEST */
	@isTest(seealldata=true)
	static void testApprovalEscalate(){
		ECO_ProjectTriggers.run = false;	
		ECO_ProjectTaskTriggers.run = false;
	
		setupTestData();
		
		Id recordTypeId = ECO_Utils_sObject.getRecordTypeId(Delegate__c.sObjectType, 'Vacation');
		Id recordTypeId2 = ECO_Utils_sObject.getRecordTypeId(Delegate__c.sObjectType, 'Key Roles');
        pse__Proj__c proj = [select id, CarryingOutOrganization__c from pse__Proj__c where Name = '**********test project 1' limit 1];

        proj.clAECOMProjectReviewCategory__c = 'C-4';
        proj.PnLManager__c = contacts[2].id;
        proj.ProjectApprover__c = contacts[3].id;
        proj.ProjectApproverUserForProcess__c = contacts[3].pse__Salesforce_User__c;
        proj.pse__Project_Manager__c = contacts[7].id;
        proj.CaptureManager__c = contacts[8].id;

        proj.EscalationApprover__c = null;
        proj.FlagForEscalate__c = true;

        update proj;





		Delegate__c delegate = new Delegate__c();
		delegate.Delegate__c = contacts[1].Id;
		delegate.RecordTypeId = recordTypeId;
		delegate.Delegator__c = contacts[2].Id;
		delegate.Start_Date__c = Date.today();
		delegate.Allowed_Organizations__c = proj.CarryingOutOrganization__c;


		Delegate__c delegate2 = new Delegate__c(
												Key_Member_Role__c = 'Project Approver', 
												age_Change_in_Forecast_Net_Margin_lt__c = 1, 
												age_Change_in_Forecast_Net_Margin__c = 5,
												Agreement_Amount_estimated__c = 5000,
												Agreement_Amount_estimated_lt__c = 0,
												Backlog_Value_lt__c = 1000,
												Backlog_Value__c = 5000,
												Project_Net_Margin_age_of_NSR_lt__c = 1,
												Project_Net_Margin_age_of_NSR__c = 5,
												Project_Net_Margin_Value_lt__c = 1000,
												Project_Net_Margin_Value__c = 5000,
												Project_Revenue_Budget_lt__c = 1000,
												Project_Revenue_Budget__c = 5000,
												Value_change_in_Forecast_Net_Margin_lt__c = 1000,
												Value_change_in_Forecast_Net_Margin__c = 5000,
												Project_Review_Category_C_4_Bypass__c = true,
												Project_Review_Category_C_4__c = false,
												Start_Date__c = datetime.now().dateGMT(),
												End_Date__c = null,
												Allowed_Organizations__c = proj.CarryingOutOrganization__c

												);
		delegate2.Delegate__c = contacts[0].Id;
		delegate2.RecordTypeId = recordTypeId2;
		delegate2.Delegator__c = contacts[2].Id;
		delegate2.Approval_Status__c = 'Approved';


		list<Delegate__c> lstdelToInsert = new list<Delegate__c> ();
		lstdelToInsert.add(delegate);
		lstdelToInsert.add(delegate2);

		insert lstdelToInsert;

        Test.startTest();
        Approval.ProcessSubmitRequest req = new Approval.ProcessSubmitRequest();
        req.setObjectId(proj.id);
        Approval.ProcessResult result = Approval.process(req);

        string query = ECO_Service_Delegation.formQuery();
        query += ' and id=\'' + result.instanceId + '\'';

        list<ProcessInstance> lstPI = database.query(query);

        system.debug('*****SAWI:' + lstPI);

        for (ProcessInstanceHistory pih : lstPI[0].StepsAndWorkItems) {
        	system.debug('*****SAWI:' + pih);
    	}

		//ECO_DelegateEscalationBatch b = new ECO_DelegateEscalationBatch();
		//Database.executeBatch(b);

		ECO_Service_Delegation.handleEscalationExecute(lstPI, false);
		Test.stopTest();
	}
	


	@isTest
	static void testvacationadmin(){
		ECO_ProjectTriggers.run = false;	
		ECO_ProjectTaskTriggers.run = false;
		Test.startTest();


		setupTestData();
		
		

		AECOM_Delegation__c ad = new AECOM_Delegation__c();
		ad.name = 'EcoPurchase Order';
		ad.Escalation__c = 'PNL';
		ad.Field_API_Name__c = 'ProjectManager__c';
		ad.Object_Name__c = 'POHeader__c';
		ad.ProcessAPIName__c = 'EcoPurchaseOrder2';
		ad.Role__c = 'Project Manager';

		insert ad;


		list<ECO_DelegationCheck__c> lstdc = new list<ECO_DelegationCheck__c>();
		lstdc.add(new ECO_DelegationCheck__c(name = 'DC TEST', Check__c = 'Review Category', ObjectAPIName__c = 'POHeader__c'));
		lstdc.add(new ECO_DelegationCheck__c(name = 'DC TEST1', Check__c = 'Agreement Amount', ObjectAPIName__c = 'POHeader__c'));
		lstdc.add(new ECO_DelegationCheck__c(name = 'DC TEST2', Check__c = 'Project Net Margin Pre-Execution', ObjectAPIName__c = 'POHeader__c'));
		lstdc.add(new ECO_DelegationCheck__c(name = 'DC TEST3', Check__c = 'Project Net Margin NSR Pre-Execution', ObjectAPIName__c = 'POHeader__c'));
		lstdc.add(new ECO_DelegationCheck__c(name = 'DC TEST4', Check__c = 'Project Revenue Budget Pre-Execution', ObjectAPIName__c = 'POHeader__c'));
		lstdc.add(new ECO_DelegationCheck__c(name = 'DC TEST5', Check__c = 'Backlog', ObjectAPIName__c = 'POHeader__c'));
		lstdc.add(new ECO_DelegationCheck__c(name = 'DC TEST6', Check__c = 'Project Net Margin', ObjectAPIName__c = 'POHeader__c'));
		lstdc.add(new ECO_DelegationCheck__c(name = 'DC TEST7', Check__c = 'Project Net Margin NSR', ObjectAPIName__c = 'POHeader__c'));

		insert lstdc;


		Id recordTypeId = ECO_Utils_sObject.getRecordTypeId(Delegate__c.sObjectType, 'Vacation');
		Id recordTypeId2 = ECO_Utils_sObject.getRecordTypeId(Delegate__c.sObjectType, 'Key Roles');
		
		OrganizationString__c org = [select id from OrganizationString__c limit 1];
		pse__Proj__c testProject = [SELECT Id, Name, CarryingOutOrganization__c FROM pse__Proj__c LIMIT 1];

		Delegate__c delegate = new Delegate__c();
		delegate.Delegate__c = contacts[1].Id;
		delegate.RecordTypeId = recordTypeId;
		delegate.Delegator__c = contacts[2].Id;
		delegate.Start_Date__c = Date.today();
		delegate.Allowed_Organizations__c = testProject.CarryingOutOrganization__c;


		Delegate__c delegate2 = new Delegate__c(
												Key_Member_Role__c = 'Project Approver', 
												age_Change_in_Forecast_Net_Margin_lt__c = 1, 
												age_Change_in_Forecast_Net_Margin__c = 5,
												Agreement_Amount_estimated__c = 5000,
												Agreement_Amount_estimated_lt__c = 0,
												Backlog_Value_lt__c = 1000,
												Backlog_Value__c = 5000,
												Project_Net_Margin_age_of_NSR_lt__c = 1,
												Project_Net_Margin_age_of_NSR__c = 5,
												Project_Net_Margin_Value_lt__c = 1000,
												Project_Net_Margin_Value__c = 5000,
												Project_Revenue_Budget_lt__c = 1000,
												Project_Revenue_Budget__c = 5000,
												Value_change_in_Forecast_Net_Margin_lt__c = 1000,
												Value_change_in_Forecast_Net_Margin__c = 5000,
												Project_Review_Category_C_4_Bypass__c = true,
												Project_Review_Category_C_1__c = false,
												Project_Review_Category_C_2__c = false,
												Project_Review_Category_C_3__c = false,
												Project_Review_Category_C_4__c = false,
												Start_Date__c = datetime.now().dateGMT(),
												End_Date__c = null,
												Allowed_Organizations__c = testProject.CarryingOutOrganization__c

												);
		delegate2.Delegate__c = contacts[0].Id;
		delegate2.RecordTypeId = recordTypeId2;
		delegate2.Delegator__c = contacts[2].Id;
		delegate2.Approval_Status__c = 'Approved';


		list<Delegate__c> lstdelToInsert = new list<Delegate__c> ();
		lstdelToInsert.add(delegate);
		lstdelToInsert.add(delegate2);

		insert lstdelToInsert;


		Test.stopTest();
		
		testProject.ProjectLongName__c = null;
		testProject.PnLManager__c = contacts[2].id;
		testProject.clAECOMProjectReviewCategory__c = 'C-4';
		testProject.EstimatedContractValue__c = 111111111;
		update testProject;

		POHeader__c po = new POHeader__c();
		po.Project__c = testProject.id;
		po.ProjectManager__c  = contacts[0].pse__Salesforce_User__c;

		insert po;

		po = [select id, Project__c, ProjectManager__c, delegateProject__c from poheader__c where id=: po.id];

		list<POHeader__c> lstPOHeader = new list<POHeader__c>();
		lstPOHeader.add(po);

		ECO_Service_Delegation.evaluateDelegation(lstPOHeader, null);

		po = [select id, ProjectManager__c from POHeader__c];
		list<delegation__c> lstDelegations = [select id from delegation__c];

		//system.assertEquals(po.ProjectManager__c, contacts[1].pse__Salesforce_User__c);
		//system.assertEquals(lstDelegations.size(), 3);

		ECO_ProjectTriggers.run = false;

		testProject.clAECOMProjectReviewCategory__c = 'C-1';
		update testProject;

		po.ProjectManager__c = contacts[0].pse__Salesforce_User__c;
		update po;

		ECO_Service_Delegation.evaluateDelegation(lstPOHeader, null);

		testProject.clAECOMProjectReviewCategory__c = 'C-0';
		update testProject;

		po.ProjectManager__c  = contacts[0].pse__Salesforce_User__c;
		update po;

		ECO_Service_Delegation.evaluateDelegation(lstPOHeader, null);


		ECO_ProjectTriggers.run = true;

	}

	@isTest
	static void testvacationadminBypass(){
		ECO_ProjectTriggers.run = false;	
		ECO_ProjectTaskTriggers.run = false;
		Test.startTest();


		setupTestData();
		
		Test.stopTest();

		AECOM_Delegation__c ad = new AECOM_Delegation__c();
		ad.name = 'EcoPurchase Order';
		ad.Escalation__c = 'PNL';
		ad.Field_API_Name__c = 'ProjectManager__c';
		ad.Object_Name__c = 'POHeader__c';
		ad.ProcessAPIName__c = 'EcoPurchaseOrder2';
		ad.Role__c = 'Project Manager';

		insert ad;


		list<ECO_DelegationCheck__c> lstdc = new list<ECO_DelegationCheck__c>();
		lstdc.add(new ECO_DelegationCheck__c(name = 'DC TEST', Check__c = 'Review Category', ObjectAPIName__c = 'POHeader__c'));
		lstdc.add(new ECO_DelegationCheck__c(name = 'DC TEST1', Check__c = 'Agreement Amount', ObjectAPIName__c = 'POHeader__c'));
		lstdc.add(new ECO_DelegationCheck__c(name = 'DC TEST2', Check__c = 'Project Net Margin Pre-Execution', ObjectAPIName__c = 'POHeader__c'));
		lstdc.add(new ECO_DelegationCheck__c(name = 'DC TEST3', Check__c = 'Project Net Margin NSR Pre-Execution', ObjectAPIName__c = 'POHeader__c'));
		lstdc.add(new ECO_DelegationCheck__c(name = 'DC TEST4', Check__c = 'Project Revenue Budget Pre-Execution', ObjectAPIName__c = 'POHeader__c'));
		lstdc.add(new ECO_DelegationCheck__c(name = 'DC TEST5', Check__c = 'Backlog', ObjectAPIName__c = 'POHeader__c'));
		lstdc.add(new ECO_DelegationCheck__c(name = 'DC TEST6', Check__c = 'Project Net Margin', ObjectAPIName__c = 'POHeader__c'));
		lstdc.add(new ECO_DelegationCheck__c(name = 'DC TEST7', Check__c = 'Project Net Margin NSR', ObjectAPIName__c = 'POHeader__c'));

		insert lstdc;


		Id recordTypeId = ECO_Utils_sObject.getRecordTypeId(Delegate__c.sObjectType, 'Vacation');
		Id recordTypeId2 = ECO_Utils_sObject.getRecordTypeId(Delegate__c.sObjectType, 'Key Roles');
		
		OrganizationString__c org = [select id from OrganizationString__c limit 1];
		pse__Proj__c testProject = [SELECT Id, Name, CarryingOutOrganization__c FROM pse__Proj__c LIMIT 1];

		Delegate__c delegate = new Delegate__c();
		delegate.Delegate__c = contacts[1].Id;
		delegate.RecordTypeId = recordTypeId;
		delegate.Delegator__c = contacts[2].Id;
		delegate.Start_Date__c = Date.today();
		delegate.Allowed_Organizations__c = testProject.CarryingOutOrganization__c;


		Delegate__c delegate2 = new Delegate__c(
												Key_Member_Role__c = 'Project Approver', 
												age_Change_in_Forecast_Net_Margin_lt__c = 1, 
												age_Change_in_Forecast_Net_Margin__c = 5,
												Agreement_Amount_estimated__c = 5000,
												Agreement_Amount_estimated_lt__c = 0,
												Backlog_Value_lt__c = 1000,
												Backlog_Value__c = 5000,
												Project_Net_Margin_age_of_NSR_lt__c = 1,
												Project_Net_Margin_age_of_NSR__c = 5,
												Project_Net_Margin_Value_lt__c = 1000,
												Project_Net_Margin_Value__c = 5000,
												Project_Revenue_Budget_lt__c = 1000,
												Project_Revenue_Budget__c = 5000,
												Value_change_in_Forecast_Net_Margin_lt__c = 1000,
												Value_change_in_Forecast_Net_Margin__c = 5000,
												Project_Review_Category_C_4_Bypass__c = false,
												Project_Review_Category_C_1__c = false,
												Project_Review_Category_C_2__c = false,
												Project_Review_Category_C_3__c = false,
												Project_Review_Category_C_4__c = false,
												Start_Date__c = datetime.now().dateGMT(),
												End_Date__c = null,
												Allowed_Organizations__c = testProject.CarryingOutOrganization__c

												);
		delegate2.Delegate__c = contacts[0].Id;
		delegate2.RecordTypeId = recordTypeId2;
		delegate2.Delegator__c = contacts[2].Id;
		delegate2.Approval_Status__c = 'Approved';


		list<Delegate__c> lstdelToInsert = new list<Delegate__c> ();
		lstdelToInsert.add(delegate);
		lstdelToInsert.add(delegate2);

		insert lstdelToInsert;



		
		testProject.ProjectLongName__c = null;
		testProject.PnLManager__c = contacts[2].id;
		testProject.clAECOMProjectReviewCategory__c = 'C-4';
		testProject.EstimatedContractValue__c = 111111111;
		update testProject;

		POHeader__c po = new POHeader__c();
		po.Project__c = testProject.id;
		po.ProjectManager__c  = contacts[0].pse__Salesforce_User__c;

		insert po;

		po = [select id, Project__c, ProjectManager__c, delegateProject__c from poheader__c where id=: po.id];

		list<POHeader__c> lstPOHeader = new list<POHeader__c>();
		lstPOHeader.add(po);

		ECO_Service_Delegation.evaluateDelegation(lstPOHeader, null);

		po = [select id, ProjectManager__c from POHeader__c];
		list<delegation__c> lstDelegations = [select id from delegation__c];

		//system.assertEquals(po.ProjectManager__c, contacts[1].pse__Salesforce_User__c);
		//system.assertEquals(lstDelegations.size(), 3);


		ECO_ProjectTriggers.run = false;

		testProject.clAECOMProjectReviewCategory__c = 'C-2';
		update testProject;

		po.ProjectManager__c  = contacts[0].pse__Salesforce_User__c;
		update po;

		ECO_Service_Delegation.evaluateDelegation(lstPOHeader, null);

		ECO_ProjectTriggers.run = true;



	}


	@isTest
	static void testvacationadminFA(){
		ECO_ProjectTriggers.run = false;	
		ECO_ProjectTaskTriggers.run = false;
		Test.startTest();


		setupTestData();
		
		Test.stopTest();

		AECOM_Delegation__c ad = new AECOM_Delegation__c();
		ad.name = 'EcoPurchase Order';
		ad.Escalation__c = 'FA';
		ad.Field_API_Name__c = 'ProjectManager__c';
		ad.Object_Name__c = 'POHeader__c';
		ad.ProcessAPIName__c = 'EcoCMGeneral';
		ad.Role__c = 'Project Manager';

		insert ad;


		list<ECO_DelegationCheck__c> lstdc = new list<ECO_DelegationCheck__c>();
		lstdc.add(new ECO_DelegationCheck__c(name = 'DC TEST', Check__c = 'Review Category', ObjectAPIName__c = 'POHeader__c'));
		lstdc.add(new ECO_DelegationCheck__c(name = 'DC TEST1', Check__c = 'Agreement Amount', ObjectAPIName__c = 'POHeader__c'));
		lstdc.add(new ECO_DelegationCheck__c(name = 'DC TEST2', Check__c = 'Project Net Margin Pre-Execution', ObjectAPIName__c = 'POHeader__c'));
		lstdc.add(new ECO_DelegationCheck__c(name = 'DC TEST3', Check__c = 'Project Net Margin NSR Pre-Execution', ObjectAPIName__c = 'POHeader__c'));
		lstdc.add(new ECO_DelegationCheck__c(name = 'DC TEST4', Check__c = 'Project Revenue Budget Pre-Execution', ObjectAPIName__c = 'POHeader__c'));
		lstdc.add(new ECO_DelegationCheck__c(name = 'DC TEST5', Check__c = 'Backlog', ObjectAPIName__c = 'POHeader__c'));
		lstdc.add(new ECO_DelegationCheck__c(name = 'DC TEST6', Check__c = 'Project Net Margin', ObjectAPIName__c = 'POHeader__c'));
		lstdc.add(new ECO_DelegationCheck__c(name = 'DC TEST7', Check__c = 'Project Net Margin NSR', ObjectAPIName__c = 'POHeader__c'));

		insert lstdc;


		Id recordTypeId = ECO_Utils_sObject.getRecordTypeId(Delegate__c.sObjectType, 'Vacation');
		Id recordTypeId2 = ECO_Utils_sObject.getRecordTypeId(Delegate__c.sObjectType, 'Key Roles');
		
		OrganizationString__c org = [select id from OrganizationString__c limit 1];
		pse__Proj__c testProject = [SELECT Id, Name, CarryingOutOrganization__c FROM pse__Proj__c LIMIT 1];

		Delegate__c delegate = new Delegate__c();
		delegate.Delegate__c = contacts[1].Id;
		delegate.RecordTypeId = recordTypeId;
		delegate.Delegator__c = contacts[2].Id;
		delegate.Start_Date__c = Date.today();
		delegate.Allowed_Organizations__c = testProject.CarryingOutOrganization__c;


		Delegate__c delegate2 = new Delegate__c(
												Key_Member_Role__c = 'Project Accountant', 
												age_Change_in_Forecast_Net_Margin_lt__c = 1, 
												age_Change_in_Forecast_Net_Margin__c = 5,
												Agreement_Amount_estimated__c = 5000,
												Agreement_Amount_estimated_lt__c = 0,
												Backlog_Value_lt__c = 1000,
												Backlog_Value__c = 5000,
												Project_Net_Margin_age_of_NSR_lt__c = 1,
												Project_Net_Margin_age_of_NSR__c = 5,
												Project_Net_Margin_Value_lt__c = 1000,
												Project_Net_Margin_Value__c = 5000,
												Project_Revenue_Budget_lt__c = 1000,
												Project_Revenue_Budget__c = 5000,
												Value_change_in_Forecast_Net_Margin_lt__c = 1000,
												Value_change_in_Forecast_Net_Margin__c = 5000,
												Project_Review_Category_C_4_Bypass__c = true,
												Project_Review_Category_C_0__c = false,
												Project_Review_Category_C_1__c = false,
												Project_Review_Category_C_2__c = false,
												Project_Review_Category_C_3__c = false,
												Project_Review_Category_C_4__c = false,
												Start_Date__c = datetime.now().dateGMT(),
												End_Date__c = null,
												Allowed_Organizations__c = testProject.CarryingOutOrganization__c

												);
		delegate2.Delegate__c = contacts[0].Id;
		delegate2.RecordTypeId = recordTypeId2;
		delegate2.Delegator__c = contacts[2].Id;
		delegate2.Approval_Status__c = 'Approved';


		list<Delegate__c> lstdelToInsert = new list<Delegate__c> ();
		lstdelToInsert.add(delegate);
		lstdelToInsert.add(delegate2);

		insert lstdelToInsert;



		
		testProject.ProjectLongName__c = null;
		testProject.PnLManager__c = contacts[3].id;
		testProject.FinanceLead__c = contacts[2].id;
		testProject.clAECOMProjectReviewCategory__c = 'C-4';
		testProject.EstimatedContractValue__c = 111111111;
		update testProject;

		POHeader__c po = new POHeader__c();
		po.Project__c = testProject.id;
		po.ProjectManager__c = contacts[0].pse__Salesforce_User__c;

		insert po;

		po = [select id, Project__c, ProjectManager__c, delegateProject__c from poheader__c where id=: po.id];

		list<POHeader__c> lstPOHeader = new list<POHeader__c>();
		lstPOHeader.add(po);

		ECO_Service_Delegation.evaluateDelegation(lstPOHeader, null);

		po = [select id, ProjectManager__c from POHeader__c];
		list<delegation__c> lstDelegations = [select id from delegation__c];

		//system.assertEquals(po.ProjectManager__c, contacts[1].pse__Salesforce_User__c);
		//system.assertEquals(lstDelegations.size(), 3);


		ECO_ProjectTriggers.run = false;

		testProject.clAECOMProjectReviewCategory__c = 'C-3';
		update testProject;

		po.ProjectManager__c  = contacts[0].pse__Salesforce_User__c;
		update po;

		ECO_Service_Delegation.evaluateDelegation(lstPOHeader, null);

		ECO_ProjectTriggers.run = true;


	}


	@isTest
	static void testChangeManagement(){

		ECO_ProjectTriggers.run = false;	
		ECO_ProjectTaskTriggers.run = false;

		Test.startTest();
		setupTestData();
		Test.stopTest();

		
		
		AECOM_Delegation__c ad = new AECOM_Delegation__c();
		ad.name = 'EcoPurchase Order';
		ad.Escalation__c = 'PNL';
		ad.Field_API_Name__c = 'ProjectApprover__c';
		ad.Object_Name__c = 'ChangeManager__c';
		ad.Process__c = 'EcoPurchase Order';
		ad.Role__c = 'Project Manager';

		insert ad;

		Id recordTypeId = ECO_Utils_sObject.getRecordTypeId(Delegate__c.sObjectType, 'Vacation');
		Id recordTypeId2 = ECO_Utils_sObject.getRecordTypeId(Delegate__c.sObjectType, 'Key Roles');
		
		pse__Proj__c testProject = [SELECT Id, Name, CarryingOutOrganization__c FROM pse__Proj__c LIMIT 1];

		Delegate__c delegate = new Delegate__c();
		delegate.Delegate__c = contacts[1].Id;
		delegate.RecordTypeId = recordTypeId;
		delegate.Delegator__c = contacts[2].Id;
		delegate.Start_Date__c = Date.today();
		delegate.Allowed_Organizations__c = testProject.CarryingOutOrganization__c;

		Delegate__c delegate2 = new Delegate__c(
												Key_Member_Role__c = 'Project Manager', 
												age_Change_in_Forecast_Net_Margin_lt__c = 1, 
												age_Change_in_Forecast_Net_Margin__c = 5,
												Agreement_Amount_estimated__c = 5000,
												Agreement_Amount_estimated_lt__c = 0,
												Backlog_Value_lt__c = 1000,
												Backlog_Value__c = 5000,
												Project_Net_Margin_age_of_NSR_lt__c = 1,
												Project_Net_Margin_age_of_NSR__c = 5,
												Project_Net_Margin_Value_lt__c = 1000,
												Project_Net_Margin_Value__c = 5000,
												Project_Revenue_Budget_lt__c = 1000,
												Project_Revenue_Budget__c = 5000,
												Value_change_in_Forecast_Net_Margin_lt__c = 1000,
												Value_change_in_Forecast_Net_Margin__c = 5000,
												Project_Review_Category_C_4_Bypass__c = true,
												Project_Review_Category_C_4__c = false,
												Allowed_Organizations__c = testProject.CarryingOutOrganization__c
												);
		delegate2.Delegate__c = contacts[0].Id;
		delegate2.RecordTypeId = recordTypeId2;
		delegate2.Delegator__c = contacts[2].Id;



		list<Delegate__c> lstdelToInsert = new list<Delegate__c> ();
		lstdelToInsert.add(delegate);
		lstdelToInsert.add(delegate2);

		insert lstdelToInsert;



		
		testProject.ProjectLongName__c = null;
		testProject.PnLManager__c = contacts[2].id;
		testProject.clAECOMProjectReviewCategory__c = 'C-4';
		update testProject;

		Id agreementRecordTypeId = ECO_Utils_Meta.getRecordTypeId(Agreement__c.sObjectType, 'Prime');
		Agreement__c agreement = new Agreement__c(RecordTypeId = agreementRecordTypeId, Project__c = testProject.Id, ChangeManagerIsChanged__c = true);
		insert agreement;		

		Id changeManagerRecordTypeId = ECO_Utils_Meta.getRecordTypeId(ChangeManager__c.sObjectType, 'Internal Change');
		ChangeManager__c changeManager = new ChangeManager__c(Project__c = testProject.Id, RecordTypeId = changeManagerRecordTypeId, ProjectApprover__c = contacts[0].pse__Salesforce_User__c);
		insert changeManager;


	}


	@isTest
	static void testChangeManagementUseDefault(){


		ECODelegationOrgPreference__c dop = new ECODelegationOrgPreference__c();
		dop.name = '111';
		dop.UseDefaultDelegation__c = true;
		insert dop;

		ECO_ProjectTriggers.run = false;	
		ECO_ProjectTaskTriggers.run = false;
		Test.startTest();


		setupTestData();
		
		Test.stopTest();

		AECOM_Delegation__c ad = new AECOM_Delegation__c();
		ad.name = 'EcoPurchase Order';
		ad.Escalation__c = 'FA';
		ad.Field_API_Name__c = 'ProjectManager__c';
		ad.Object_Name__c = 'POHeader__c';
		ad.ProcessAPIName__c = 'EcoCMGeneral';
		ad.Role__c = 'Project Manager';

		insert ad;


		list<ECO_DelegationCheck__c> lstdc = new list<ECO_DelegationCheck__c>();
		lstdc.add(new ECO_DelegationCheck__c(name = 'DC TEST', Check__c = 'Review Category', ObjectAPIName__c = 'POHeader__c'));
		lstdc.add(new ECO_DelegationCheck__c(name = 'DC TEST1', Check__c = 'Agreement Amount', ObjectAPIName__c = 'POHeader__c'));
		lstdc.add(new ECO_DelegationCheck__c(name = 'DC TEST2', Check__c = 'Project Net Margin Pre-Execution', ObjectAPIName__c = 'POHeader__c'));
		lstdc.add(new ECO_DelegationCheck__c(name = 'DC TEST3', Check__c = 'Project Net Margin NSR Pre-Execution', ObjectAPIName__c = 'POHeader__c'));
		lstdc.add(new ECO_DelegationCheck__c(name = 'DC TEST4', Check__c = 'Project Revenue Budget Pre-Execution', ObjectAPIName__c = 'POHeader__c'));
		lstdc.add(new ECO_DelegationCheck__c(name = 'DC TEST5', Check__c = 'Backlog', ObjectAPIName__c = 'POHeader__c'));
		lstdc.add(new ECO_DelegationCheck__c(name = 'DC TEST6', Check__c = 'Project Net Margin', ObjectAPIName__c = 'POHeader__c'));
		lstdc.add(new ECO_DelegationCheck__c(name = 'DC TEST7', Check__c = 'Project Net Margin NSR', ObjectAPIName__c = 'POHeader__c'));

		insert lstdc;


		Id recordTypeId = ECO_Utils_sObject.getRecordTypeId(Delegate__c.sObjectType, 'Vacation');
		Id recordTypeId2 = ECO_Utils_sObject.getRecordTypeId(Delegate__c.sObjectType, 'Key Roles');
		Id recordTypeId3 = ECO_Utils_sObject.getRecordTypeId(Delegate__c.sObjectType, 'Default');
		
		OrganizationString__c org = [select id from OrganizationString__c limit 1];
		pse__Proj__c testProject = [SELECT Id, Name, CarryingOutOrganization__c FROM pse__Proj__c LIMIT 1];

		Delegate__c delegate = new Delegate__c();
		delegate.Delegate__c = contacts[1].Id;
		delegate.RecordTypeId = recordTypeId;
		delegate.Delegator__c = contacts[2].Id;
		delegate.Start_Date__c = Date.today();
		delegate.Allowed_Organizations__c = testProject.CarryingOutOrganization__c;


		Delegate__c delegate2 = new Delegate__c(
												Key_Member_Role__c = 'Project Accountant', 
												age_Change_in_Forecast_Net_Margin_lt__c = 1, 
												age_Change_in_Forecast_Net_Margin__c = 5,
												Agreement_Amount_estimated__c = 5000,
												Agreement_Amount_estimated_lt__c = 0,
												Backlog_Value_lt__c = 1000,
												Backlog_Value__c = 5000,
												Project_Net_Margin_age_of_NSR_lt__c = 1,
												Project_Net_Margin_age_of_NSR__c = 5,
												Project_Net_Margin_Value_lt__c = 1000,
												Project_Net_Margin_Value__c = 5000,
												Project_Revenue_Budget_lt__c = 1000,
												Project_Revenue_Budget__c = 5000,
												Value_change_in_Forecast_Net_Margin_lt__c = 1000,
												Value_change_in_Forecast_Net_Margin__c = 5000,
												Project_Review_Category_C_4_Bypass__c = true,
												Project_Review_Category_C_0__c = false,
												Project_Review_Category_C_1__c = false,
												Project_Review_Category_C_2__c = false,
												Project_Review_Category_C_3__c = false,
												Project_Review_Category_C_4__c = false,
												Start_Date__c = datetime.now().dateGMT(),
												End_Date__c = null,
												Allowed_Organizations__c = testProject.CarryingOutOrganization__c

												);
		delegate2.Delegate__c = contacts[0].Id;
		delegate2.RecordTypeId = recordTypeId2;
		delegate2.Delegator__c = contacts[2].Id;
		delegate2.Approval_Status__c = 'Approved';

		Delegate__c delegate3 = new Delegate__c(
												Key_Member_Role__c = 'Project Accountant', 
												age_Change_in_Forecast_Net_Margin_lt__c = 1, 
												age_Change_in_Forecast_Net_Margin__c = 5,
												Agreement_Amount_estimated__c = 5000,
												Agreement_Amount_estimated_lt__c = 0,
												Backlog_Value_lt__c = 1000,
												Backlog_Value__c = 5000,
												Project_Net_Margin_age_of_NSR_lt__c = 1,
												Project_Net_Margin_age_of_NSR__c = 5,
												Project_Net_Margin_Value_lt__c = 1000,
												Project_Net_Margin_Value__c = 5000,
												Project_Revenue_Budget_lt__c = 1000,
												Project_Revenue_Budget__c = 5000,
												Value_change_in_Forecast_Net_Margin_lt__c = 1000,
												Value_change_in_Forecast_Net_Margin__c = 5000,
												Project_Review_Category_C_4_Bypass__c = true,
												Project_Review_Category_C_4__c = false,
												Allowed_Organizations__c = testProject.CarryingOutOrganization__c
												);
		delegate3.RecordTypeId = recordTypeId3;
		delegate3.OUID__c = '111';



		list<Delegate__c> lstdelToInsert = new list<Delegate__c> ();
		lstdelToInsert.add(delegate);
		lstdelToInsert.add(delegate2);

		insert lstdelToInsert;
		insert delegate3;

		
		testProject.ProjectLongName__c = null;
		testProject.PnLManager__c = contacts[3].id;
		testProject.FinanceLead__c = contacts[2].id;
		testProject.clAECOMProjectReviewCategory__c = 'C-4';
		testProject.EstimatedContractValue__c = 111111111;
		update testProject;

		POHeader__c po = new POHeader__c();
		po.Project__c = testProject.id;
		po.ProjectManager__c = contacts[0].pse__Salesforce_User__c;

		insert po;

		po = [select id, Project__c, ProjectManager__c, delegateProject__c from poheader__c where id=: po.id];

		list<POHeader__c> lstPOHeader = new list<POHeader__c>();
		lstPOHeader.add(po);

		ECO_Service_Delegation.evaluateDelegation(lstPOHeader, null);

		po = [select id, ProjectManager__c from POHeader__c];
		list<delegation__c> lstDelegations = [select id from delegation__c];

		//system.assertEquals(po.ProjectManager__c, contacts[1].pse__Salesforce_User__c);
		//system.assertEquals(lstDelegations.size(), 3);


		ECO_ProjectTriggers.run = false;

		testProject.clAECOMProjectReviewCategory__c = 'C-3';
		update testProject;

		po.ProjectManager__c  = contacts[0].pse__Salesforce_User__c;
		update po;

		ECO_Service_Delegation.evaluateDelegation(lstPOHeader, null);

		ECO_ProjectTriggers.run = true;


	}


	static void setupTestData(){

		contacts = ECO_Utils_Testing.createTestDataForOrgFinder();


	}



}